{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      state.totalQuantity--;\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-739a7-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error('problem sending data');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: \"Sent Cart Data Successfully\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error :(',\n        message: \"Sending Cart Data Failed :(\"\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/dmbluesmith/DevWork/Learn_React/redux-part-2/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","totalAmount","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n        totalAmount: 0,\n    },\n    reducers: {\n        addItemToCart(state, action) {\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => item.id === newItem.id);\n            state.totalQuantity++;\n            if (!existingItem) {\n                state.items.push({\n                    id: newItem.id,\n                    price: newItem.price,\n                    quantity: 1,\n                    totalPrice: newItem.price,\n                    name: newItem.title\n                });\n            } else {\n                existingItem.quantity++;\n                existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n            }\n        },\n        removeItemFromCart(state, action) {\n            state.totalQuantity--;\n            const id = action.payload;\n            const existingItem = state.items.find(item => item.id === id);\n            if (existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== id);\n            } else {\n                existingItem.quantity--;\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n            }\n        },\n    },\n});\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(uiActions.showNotification({\n            status: 'pending',\n            title: 'Sending...',\n            message: 'Sending cart data!'\n        }));\n\n        const sendRequest = async () => {\n            const response = await fetch(\n                'https://react-http-739a7-default-rtdb.firebaseio.com/cart.json',\n                {\n                    method: 'PUT',\n                    body: JSON.stringify(cart),\n                }\n            );\n    \n            if (!response.ok) {\n                throw new Error('problem sending data');\n            }\n        }\n\n        try {\n            await sendRequest();\n            dispatch(uiActions.showNotification({\n                status: 'success',\n                title: 'Success!',\n                message: \"Sent Cart Data Successfully\"\n              }));\n        } catch (error) {\n            dispatch(uiActions.showNotification({\n                status: 'error',\n                title: 'Error :(',\n                message: \"Sending Cart Data Failed :(\"\n              }));\n        }\n\n\n    };\n}\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}