{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initAuthState = {\n  isAuthenticated: false\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter += action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.ShowCounter;\n    }\n\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // Normal Redux\n// const counterReducer = (state = initState, action) => {\n//     if (action.type === \"INCREMENT\") {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter,\n//         };\n//     }\n//     if (action.type === \"INCREASE\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter,\n//         }\n//     }\n//     if (action.type === \"DECREMENT\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.ShowCounter,\n//         };\n//     }\n//     if (action.type === \"TOGGLE\") {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter,\n//         }\n//     }\n//     return state;\n// }\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/dmbluesmith/DevWork/Learn_React/redux-react/src/store/index.js"],"names":["createSlice","configureStore","initCounterState","counter","showCounter","initAuthState","isAuthenticated","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","ShowCounter","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAGA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,OAAO,EAAE,CADY;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB;AAKA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,eAAe,EAAE;AADC,CAAtB;AAIA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC7BQ,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAEP,gBAFe;AAG7BQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACT,OAAN;AACH,KAHK;;AAINU,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACT,OAAN;AACH,KANK;;AAONW,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACpBH,MAAAA,KAAK,CAACT,OAAN,IAAiBY,MAAM,CAACC,OAAxB;AACH,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACR,WAAN,GAAoB,CAACQ,KAAK,CAACM,WAA3B;AACH;;AAZK;AAHmB,CAAD,CAAhC;AAoBA,MAAMC,SAAS,GAAGnB,WAAW,CAAC;AAC1BQ,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAEJ,aAFY;AAG1BK,EAAAA,QAAQ,EAAE;AACNU,IAAAA,KAAK,CAACR,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACN,eAAN,GAAwB,IAAxB;AACH,KAHK;;AAINe,IAAAA,MAAM,CAACT,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACN,eAAN,GAAwB,KAAxB;AACH;;AANK;AAHgB,CAAD,CAA7B,C,CAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAMgB,KAAK,GAAGrB,cAAc,CAAC;AACzBsB,EAAAA,OAAO,EAAE;AACLpB,IAAAA,OAAO,EAAEI,YAAY,CAACgB,OADjB;AAELC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAFX;AADgB,CAAD,CAA5B;AAOA,OAAO,MAAME,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B;AACP,eAAeJ,KAAf","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit';\n\n\nconst initCounterState = {\n    counter: 0,\n    showCounter: true,\n}\n\nconst initAuthState = {\n    isAuthenticated: false\n}\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initCounterState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter += action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.ShowCounter;\n        },\n    }\n\n});\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState: initAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n// Normal Redux\n\n// const counterReducer = (state = initState, action) => {\n//     if (action.type === \"INCREMENT\") {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter,\n//         };\n//     }\n\n//     if (action.type === \"INCREASE\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter,\n//         }\n//     }\n\n//     if (action.type === \"DECREMENT\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.ShowCounter,\n//         };\n//     }\n\n//     if (action.type === \"TOGGLE\") {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter,\n//         }\n//     }\n\n//     return state;\n// }\n\nconst store = configureStore({\n    reducer: {\n        counter: counterSlice.reducer,\n        auth: authSlice.reducer,\n    }\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;"]},"metadata":{},"sourceType":"module"}